const jwt = require("jsonwebtoken");
const { DashboardModel } = require('../models');

/**
 * Middleware espec√≠fico para autentica√ß√£o no dashboard
 * Verifica token e carrega dados do usu√°rio com roles
 */
const dashboardAuth = async (req, res, next) => {
  try {
    // Extrair token do cookie
    const token = req.cookies.token;

    if (!token) {
      console.log('üìù [DASHBOARD] Token n√£o encontrado, redirecionando para login');
      
      // Se for requisi√ß√£o AJAX, retornar JSON
      if (req.xhr || req.headers.accept.indexOf('json') > -1) {
        return res.status(401).json({ 
          error: 'Token de acesso requerido',
          redirect: '/login'
        });
      }
      
      // Se for requisi√ß√£o normal, redirecionar
      return res.redirect('/login');
    }

    try {
      // Verificar e decodificar token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const userId = decoded.id;
      
      console.log('üîê [DASHBOARD] Token v√°lido para usu√°rio:', userId);

      // Buscar dados completos do usu√°rio com roles
      const [userData, userRoles] = await Promise.all([
        DashboardModel.getUserBasicData(userId),
        DashboardModel.getUserRoles(userId)
      ]);

      if (!userData) {
        console.log('‚ùå [DASHBOARD] Usu√°rio n√£o encontrado:', userId);
        throw new Error('Usu√°rio n√£o encontrado');
      }

      if (!userRoles || userRoles.length === 0) {
        console.log('‚ùå [DASHBOARD] Usu√°rio sem roles v√°lidos:', userId);
        throw new Error('Usu√°rio sem permiss√µes');
      }

      // Adicionar dados ao request
      req.userId = userId;
      req.user = userData;
      req.userRoles = userRoles;
      req.primaryRole = userRoles[0]; // Role principal (menor ID = maior prioridade)
      
      // Flags de conveni√™ncia para verifica√ß√µes r√°pidas
    const roleNames = userRoles.map(role => role.role_name.toLowerCase());
    req.isPTD = roleNames.includes('ptd');
    req.isGestor = roleNames.includes('gestor');
    req.isAdmin = roleNames.includes('admin');;

      console.log('‚úÖ [DASHBOARD] Autentica√ß√£o bem-sucedida:', {
        userId,
        name: userData.name,
        primaryRole: req.primaryRole.role_name,
        isPTD: req.isPTD,
        isGestor: req.isGestor,
        isAdmin: req.isAdmin
      });

      return next();

    } catch (jwtError) {
      console.log('‚ùå [DASHBOARD] Token inv√°lido:', jwtError.message);
      
      // Limpar cookie inv√°lido
      res.clearCookie("token", {
        httpOnly: true,
        sameSite: "strict",
      });

      // Se for requisi√ß√£o AJAX, retornar JSON
      if (req.xhr || req.headers.accept.indexOf('json') > -1) {
        return res.status(401).json({ 
          error: 'Token inv√°lido',
          redirect: '/login'
        });
      }
      
      // Se for requisi√ß√£o normal, redirecionar
      return res.redirect('/login');
    }

  } catch (error) {
    console.error('‚ùå [DASHBOARD] Erro no middleware de autentica√ß√£o:', error);
    
    // Se for requisi√ß√£o AJAX, retornar JSON
    if (req.xhr || req.headers.accept.indexOf('json') > -1) {
      return res.status(500).json({ 
        error: 'Erro interno de autentica√ß√£o',
        redirect: '/login'
      });
    }
    
    // Se for requisi√ß√£o normal, renderizar p√°gina de erro
    return res.status(500).render('pages/error', {
      title: 'Erro de Autentica√ß√£o',
      message: 'Erro interno do servidor durante autentica√ß√£o'
    });
  }
};

/**
 * Middleware para verificar se usu√°rio est√° logado (vers√£o leve)
 * Apenas verifica token sem carregar dados completos
 */
const checkLoggedIn = (req, res, next) => {
  try {
    const token = req.cookies.token;

    if (!token) {
      req.isLoggedIn = false;
      req.userId = null;
      return next();
    }

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.isLoggedIn = true;
      req.userId = decoded.id;
    } catch (jwtError) {
      req.isLoggedIn = false;
      req.userId = null;
      
      // Limpar cookie inv√°lido
      res.clearCookie("token");
    }

    return next();

  } catch (error) {
    console.error('‚ùå [DASHBOARD] Erro no middleware checkLoggedIn:', error);
    req.isLoggedIn = false;
    req.userId = null;
    return next();
  }
};

/**
 * Middleware para redirecionar usu√°rios logados
 * √ötil para p√°ginas como login que n√£o devem ser acessadas por usu√°rios logados
 */
const redirectIfLoggedIn = (req, res, next) => {
  try {
    const token = req.cookies.token;

    if (!token) {
      return next();
    }

    try {
      jwt.verify(token, process.env.JWT_SECRET);
      
      console.log('üîÑ [DASHBOARD] Usu√°rio j√° logado, redirecionando para dashboard');
      return res.redirect('/dashboard');
      
    } catch (jwtError) {
      // Token inv√°lido, limpar e continuar
      res.clearCookie("token");
      return next();
    }

  } catch (error) {
    console.error('‚ùå [DASHBOARD] Erro no middleware redirectIfLoggedIn:', error);
    return next();
  }
};

/**
 * Middleware para atualizar √∫ltima atividade
 */
const updateLastActivity = async (req, res, next) => {
  try {
    if (req.userId) {
      // Atualizar em background (n√£o aguardar)
      DashboardModel.updateLastActivity(req.userId).catch(error => {
        console.error('‚ùå [DASHBOARD] Erro ao atualizar √∫ltima atividade:', error);
      });
    }
    
    return next();
    
  } catch (error) {
    console.error('‚ùå [DASHBOARD] Erro no middleware updateLastActivity:', error);
    return next(); // Continuar mesmo com erro
  }
};

/**
 * Middleware para log de acesso
 */
const logAccess = (req, res, next) => {
  try {
    const timestamp = new Date().toISOString();
    const userInfo = req.user ? `${req.user.name} (ID: ${req.userId})` : 'An√¥nimo';
    const roleInfo = req.primaryRole ? req.primaryRole.role_name : 'Sem role';
    
    console.log(`üìä [DASHBOARD ACCESS] ${timestamp} - ${userInfo} - ${roleInfo} - ${req.method} ${req.originalUrl}`);
    
    return next();
    
  } catch (error) {
    console.error('‚ùå [DASHBOARD] Erro no middleware logAccess:', error);
    return next(); // Continuar mesmo com erro
  }
};

/**
 * Middleware composto para p√°ginas do dashboard
 * Combina autentica√ß√£o, atualiza√ß√£o de atividade e log
 */
const dashboardMiddleware = [
  dashboardAuth,
  updateLastActivity,
  logAccess
];

/**
 * Middleware composto para APIs do dashboard
 * Similar ao dashboardMiddleware mas sem log detalhado
 */
const dashboardAPIMiddleware = [
  dashboardAuth,
  updateLastActivity
];

module.exports = {
  dashboardAuth,
  checkLoggedIn,
  redirectIfLoggedIn,
  updateLastActivity,
  logAccess,
  dashboardMiddleware,
  dashboardAPIMiddleware
};