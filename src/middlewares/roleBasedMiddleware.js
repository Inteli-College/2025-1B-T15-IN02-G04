const { DashboardModel } = require('../models');

/**
 * Factory function para criar middleware de verifica√ß√£o de role
 * @param {number|Array} requiredRoles - Role(s) necess√°rio(s) (1=Admin, 2=Gestor, 3=PTD)
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Function} Middleware function
 */
const requireRole = (requiredRoles, options = {}) => {
  const {
    allowHigherRoles = true, // Se true, roles menores (mais altos) t√™m acesso
    errorMessage = 'Acesso negado',
    redirectTo = null, // Para onde redirecionar em caso de erro (se n√£o for API)
    logAccess = true
  } = options;

  // Normalizar para array
  const rolesArray = Array.isArray(requiredRoles) ? requiredRoles : [requiredRoles];

  return async (req, res, next) => {
    try {
      const userId = req.userId;
      const userRoles = req.userRoles;
      
      if (!userId || !userRoles) {
        console.log('‚ùå [ROLE] Usu√°rio n√£o autenticado');
        return handleUnauthorized(req, res, 'Usu√°rio n√£o autenticado', redirectTo);
      }

      // Extrair IDs dos roles do usu√°rio
      const userRoleIds = userRoles.map(role => role.id_role);
      
      // Verificar se o usu√°rio tem algum dos roles necess√°rios
      let hasAccess = false;
      
      for (const requiredRole of rolesArray) {
        if (userRoleIds.includes(requiredRole)) {
          hasAccess = true;
          break;
        }
        
        // Se allowHigherRoles for true, verificar roles superiores (menor ID = maior prioridade)
        if (allowHigherRoles) {
          const hasHigherRole = userRoleIds.some(roleId => roleId < requiredRole);
          if (hasHigherRole) {
            hasAccess = true;
            break;
          }
        }
      }

      if (!hasAccess) {
        if (logAccess) {
          console.log(`‚ùå [ROLE] Acesso negado - Usu√°rio ${userId} (${userRoleIds.join(',')}) tentou acessar roles ${rolesArray.join(',')}`);
        }
        return handleUnauthorized(req, res, errorMessage, redirectTo);
      }

      if (logAccess) {
        console.log(`‚úÖ [ROLE] Acesso permitido - Usu√°rio ${userId} com roles ${userRoleIds.join(',')}`);
      }

      return next();

    } catch (error) {
      console.error('‚ùå [ROLE] Erro no middleware de role:', error);
      return handleServerError(req, res, 'Erro interno de autoriza√ß√£o');
    }
  };
};

/**
 * Middleware espec√≠fico para PTDs (role_id = 3)
 */
const requirePTD = requireRole(3, {
  errorMessage: 'Acesso negado: usu√°rio n√£o √© PTD',
  allowHigherRoles: false
});

/**
 * Middleware espec√≠fico para Gestores (role_id = 2)
 * Admins tamb√©m t√™m acesso por padr√£o
 */
const requireGestor = requireRole(2, {
  errorMessage: 'Acesso negado: usu√°rio n√£o √© Gestor',
  allowHigherRoles: true
});

/**
 * Middleware espec√≠fico para Admins (role_id = 1)
 */
const requireAdmin = requireRole(1, {
  errorMessage: 'Acesso negado: usu√°rio n√£o √© Admin',
  allowHigherRoles: false
});

/**
 * Middleware para verificar m√∫ltiplos roles (OR)
 * Usu√°rio precisa ter pelo menos um dos roles especificados
 */
const requireAnyRole = (roles, options = {}) => {
  return requireRole(roles, {
    ...options,
    allowHigherRoles: false
  });
};

/**
 * Middleware para verificar todos os roles (AND)
 * Usu√°rio precisa ter todos os roles especificados
 */
const requireAllRoles = (roles, options = {}) => {
  const rolesArray = Array.isArray(roles) ? roles : [roles];
  
  return async (req, res, next) => {
    try {
      const userId = req.userId;
      const userRoles = req.userRoles;
      
      if (!userId || !userRoles) {
        return handleUnauthorized(req, res, 'Usu√°rio n√£o autenticado');
      }

      const userRoleIds = userRoles.map(role => role.id_role);
      
      // Verificar se o usu√°rio tem todos os roles necess√°rios
      const hasAllRoles = rolesArray.every(requiredRole => 
        userRoleIds.includes(requiredRole)
      );

      if (!hasAllRoles) {
        const missingRoles = rolesArray.filter(role => !userRoleIds.includes(role));
        console.log(`‚ùå [ROLE] Acesso negado - Usu√°rio ${userId} n√£o possui todos os roles necess√°rios. Faltam: ${missingRoles.join(',')}`);
        
        return handleUnauthorized(req, res, options.errorMessage || 'Acesso negado: roles insuficientes');
      }

      console.log(`‚úÖ [ROLE] Acesso permitido - Usu√°rio ${userId} possui todos os roles necess√°rios`);
      return next();

    } catch (error) {
      console.error('‚ùå [ROLE] Erro no middleware requireAllRoles:', error);
      return handleServerError(req, res, 'Erro interno de autoriza√ß√£o');
    }
  };
};

/**
 * Middleware din√¢mico baseado no role do usu√°rio
 * Redireciona para dashboard espec√≠fico baseado no role principal
 */
const roleBasedRedirect = (req, res, next) => {
  try {
    const primaryRole = req.primaryRole;
    
    if (!primaryRole) {
      console.log('‚ùå [ROLE] Role principal n√£o encontrado');
      return res.redirect('/login');
    }

    // Definir redirecionamentos baseados no role
    const roleRedirects = {
      1: '/dashboard', // Admin
      2: '/dashboard', // Gestor 
      3: '/dashboard'  // PTD
    };

    const redirectPath = roleRedirects[primaryRole.id_role];
    
    if (!redirectPath) {
      console.log(`‚ùå [ROLE] Role n√£o reconhecido: ${primaryRole.id_role}`);
      return res.redirect('/login');
    }

    // Se j√° est√° na p√°gina correta, continuar
    if (req.path === redirectPath) {
      return next();
    }

    console.log(`üîÑ [ROLE] Redirecionando usu√°rio ${req.userId} (${primaryRole.role_name}) para ${redirectPath}`);
    return res.redirect(redirectPath);

  } catch (error) {
    console.error('‚ùå [ROLE] Erro no middleware roleBasedRedirect:', error);
    return res.redirect('/login');
  }
};

/**
 * Middleware para verificar se usu√°rio pode acessar dados de outro usu√°rio
 * Regras:
 * - Usu√°rio pode acessar seus pr√≥prios dados
 * - Admin pode acessar dados de qualquer usu√°rio
 * - Gestor pode acessar dados dos PTDs da sua equipe
 */
const canAccessUserData = async (req, res, next) => {
  try {
    const currentUserId = req.userId;
    const targetUserId = parseInt(req.params.userId || req.params.ptdId || req.body.userId);
    
    if (!targetUserId) {
      return res.status(400).json({ error: 'ID do usu√°rio n√£o fornecido' });
    }

    // Usu√°rio pode acessar seus pr√≥prios dados
    if (currentUserId === targetUserId) {
      return next();
    }

    // Admin pode acessar qualquer usu√°rio
    if (req.isAdmin) {
      return next();
    }

    // Gestor pode acessar PTDs da sua equipe
    if (req.isGestor) {
      const { HierarchyModel } = require('../models');
      const canManage = await HierarchyModel.canManagePTD(currentUserId, targetUserId);
      
      if (canManage) {
        return next();
      }
    }

    console.log(`‚ùå [ROLE] Usu√°rio ${currentUserId} tentou acessar dados do usu√°rio ${targetUserId} sem permiss√£o`);
    return handleUnauthorized(req, res, 'Acesso negado aos dados do usu√°rio');

  } catch (error) {
    console.error('‚ùå [ROLE] Erro no middleware canAccessUserData:', error);
    return handleServerError(req, res, 'Erro interno de autoriza√ß√£o');
  }
};

/**
 * Middleware para log de tentativas de acesso negado
 */
const logAccessAttempts = (req, res, next) => {
  const originalSend = res.send;
  
  res.send = function(data) {
    // Log tentativas de acesso negado
    if (res.statusCode === 403 || res.statusCode === 401) {
      const userInfo = req.userId ? `Usu√°rio ${req.userId}` : 'Usu√°rio an√¥nimo';
      const roleInfo = req.primaryRole ? `Role: ${req.primaryRole.role_name}` : 'Sem role';
      
      console.log(`üîí [ACCESS DENIED] ${userInfo} - ${roleInfo} - ${req.method} ${req.originalUrl} - Status: ${res.statusCode}`);
    }
    
    originalSend.call(this, data);
  };
  
  return next();
};

/**
 * Fun√ß√£o auxiliar para lidar com acesso n√£o autorizado
 */
function handleUnauthorized(req, res, message, redirectTo = null) {
  // Se for requisi√ß√£o AJAX ou API, retornar JSON
  if (req.xhr || req.headers.accept.indexOf('json') > -1 || req.path.startsWith('/api/')) {
    return res.status(403).json({ 
      error: message,
      redirect: redirectTo || '/dashboard'
    });
  }
  
  // Se h√° um redirecionamento espec√≠fico
  if (redirectTo) {
    return res.redirect(redirectTo);
  }
  
  // Renderizar p√°gina de erro
  return res.status(403).render('pages/error', {
    title: 'Acesso Negado',
    message: message
  });
}

/**
 * Fun√ß√£o auxiliar para lidar com erros do servidor
 */
function handleServerError(req, res, message) {
  // Se for requisi√ß√£o AJAX ou API, retornar JSON
  if (req.xhr || req.headers.accept.indexOf('json') > -1 || req.path.startsWith('/api/')) {
    return res.status(500).json({ 
      error: message,
      redirect: '/dashboard'
    });
  }
  
  // Renderizar p√°gina de erro
  return res.status(500).render('pages/error', {
    title: 'Erro Interno',
    message: message
  });
}

module.exports = {
  requireRole,
  requirePTD,
  requireGestor,
  requireAdmin,
  requireAnyRole,
  requireAllRoles,
  roleBasedRedirect,
  canAccessUserData,
  logAccessAttempts
};