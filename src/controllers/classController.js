const ClassModel = require('../models/classModel');
const ModuleModel = require('../models/moduleModel');

class ClassController {
  
  // üß™ M√âTODO DE TESTE
  static async testBasic(req, res) {
    try {
      console.log('üß™ [TEST] Teste b√°sico de aulas iniciado...');
      
      const testData = {
        status: 'API de aulas funcionando',
        timestamp: new Date().toISOString(),
        message: 'ClassController respondendo corretamente'
      };
      
      console.log('‚úÖ [TEST] Teste de aulas OK');
      res.json(testData);
      
    } catch (error) {
      console.error('‚ùå [TEST] Erro no teste de aulas:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üìã LISTAR TODAS AS AULAS
  static async getAllClasses(req, res) {
    try {
      console.log('üîç [DEBUG] === INICIANDO getAllClasses ===');
      
      if (!ClassModel || !ClassModel.getAllClasses) {
        console.error('‚ùå [DEBUG] ClassModel.getAllClasses n√£o encontrado');
        return res.status(500).json({ error: 'M√©todo getAllClasses n√£o encontrado' });
      }
      
      const classes = await ClassModel.getAllClasses();
      
      console.log('üîç [DEBUG] Aulas encontradas:', classes ? classes.length : 0);
      console.log('‚úÖ [DEBUG] Retornando resposta...');
      
      return res.status(200).json(classes || []);
      
    } catch (error) {
      console.error('üí• [DEBUG] Erro getAllClasses:', error.message);
      return res.status(500).json({ error: 'Erro ao listar aulas.' });
    }
  }

  // üéØ BUSCAR AULAS POR M√ìDULO
  static async getClassesByModuleId(req, res) {
    try {
      const { moduleId } = req.params;
      console.log('üîç [DEBUG] === INICIANDO getClassesByModuleId ===');
      console.log('üîç Module ID recebido:', moduleId);
      
      // Validar ID
      if (!moduleId || isNaN(moduleId)) {
        console.log('‚ùå [DEBUG] Module ID inv√°lido');
        return res.status(400).json({ error: 'ID do m√≥dulo inv√°lido' });
      }
      
      // Verificar se o m√≥dulo existe
      console.log('üîç [DEBUG] Verificando se m√≥dulo existe...');
      
      if (!ModuleModel || !ModuleModel.getModuleById) {
        console.error('‚ùå [DEBUG] ModuleModel n√£o encontrado');
        return res.status(500).json({ error: 'ModuleModel n√£o encontrado' });
      }
      
      const module = await ModuleModel.getModuleById(moduleId);
      console.log('üîç [DEBUG] M√≥dulo encontrado:', module ? 'SIM' : 'N√ÉO');
      
      if (!module) {
        console.log('‚ùå [DEBUG] M√≥dulo n√£o existe para ID:', moduleId);
        return res.status(404).json({ error: 'M√≥dulo n√£o encontrado' });
      }
      
      console.log('‚úÖ [DEBUG] M√≥dulo OK:', module.name);
      
      // Buscar aulas do m√≥dulo
      console.log('üîç [DEBUG] Buscando aulas do m√≥dulo...');
      
      if (!ClassModel || !ClassModel.getClassesByModuleId) {
        console.error('‚ùå [DEBUG] ClassModel.getClassesByModuleId n√£o encontrado');
        return res.status(500).json({ error: 'M√©todo de busca de aulas n√£o encontrado' });
      }
      
      const classes = await ClassModel.getClassesByModuleId(moduleId);
      console.log('üîç [DEBUG] Aulas encontradas:', classes ? classes.length : 0);
      
      if (classes && classes.length > 0) {
        console.log('üîç [DEBUG] Primeira aula:', classes[0].name);
      }
      
      console.log('‚úÖ [DEBUG] Retornando resposta final...');
      return res.status(200).json({
        module: module,
        classes: classes || []
      });
      
    } catch (error) {
      console.error('üí• [DEBUG] === ERRO getClassesByModuleId ===');
      console.error('üí• Mensagem:', error.message);
      console.error('üí• Stack:', error.stack);
      
      return res.status(500).json({ 
        error: 'Erro ao obter aulas do m√≥dulo',
        debug: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // üîç BUSCAR AULA POR ID
  static async getClassById(req, res) {
    try {
      const { id } = req.params;
      console.log('üîç [DEBUG] Buscando aula ID:', id);
      
      const classItem = await ClassModel.getClassById(id);
      if (!classItem) {
        console.log('‚ùå [DEBUG] Aula n√£o encontrada para ID:', id);
        return res.status(404).json({ error: 'Aula n√£o encontrada' });
      }
      
      console.log('‚úÖ [DEBUG] Aula encontrada:', classItem.name);
      return res.status(200).json(classItem);
    } catch (error) {
      console.error('üí• [DEBUG] Erro getClassById:', error.message);
      return res.status(500).json({ error: 'Erro ao obter aula.' });
    }
  }

  // üîç BUSCAR AULA POR NOME
  static async getClassByName(req, res) {
    try {
      const { name } = req.params;
      console.log('üîç [DEBUG] Buscando aula nome:', name);
      
      const classItem = await ClassModel.getClassByName(name);
      if (!classItem) {
        console.log('‚ùå [DEBUG] Aula n√£o encontrada para nome:', name);
        return res.status(404).json({ error: 'Aula n√£o encontrada' });
      }
      
      console.log('‚úÖ [DEBUG] Aula encontrada:', classItem.name);
      return res.status(200).json(classItem);
    } catch (error) {
      console.error('üí• [DEBUG] Erro getClassByName:', error.message);
      return res.status(500).json({ error: 'Erro ao obter aula.' });
    }
  }

  // ‚ûï CRIAR NOVA AULA
  static async createClass(req, res) {
    try {
      const { name, description, duration, video_url, module_id, order_position } = req.body;
      console.log('üîç [DEBUG] Criando nova aula:', name);

      // Valida√ß√µes b√°sicas
      if (!name || !module_id) {
        return res.status(400).json({ error: 'Nome e ID do m√≥dulo s√£o obrigat√≥rios.' });
      }

      // Verificar se o m√≥dulo existe
      const module = await ModuleModel.getModuleById(module_id);
      if (!module) {
        return res.status(404).json({ error: 'M√≥dulo n√£o encontrado' });
      }

      const newClass = await ClassModel.createClass({
        name,
        description,
        duration: duration || '30min',
        video_url,
        module_id,
        order_position: order_position || 1
      });
      
      console.log('‚úÖ [DEBUG] Aula criada:', newClass.name);
      return res.status(201).json(newClass);
    } catch (error) {
      console.error('üí• [DEBUG] Erro ao criar aula:', error);
      res.status(500).json({ error: 'Erro ao criar aula' });
    }
  }

  // ‚úèÔ∏è ATUALIZAR AULA
  static async updateClass(req, res) {
    try {
      const { id } = req.params;
      const { name, description, duration, video_url, order_position } = req.body;
      
      console.log('üîç [DEBUG] Atualizando aula ID:', id);
      
      const updatedClass = await ClassModel.updateClass(
        id, 
        name, 
        description, 
        duration, 
        video_url,
        order_position
      );
      
      if (updatedClass) {
        console.log('‚úÖ [DEBUG] Aula atualizada:', updatedClass.name);
        res.status(200).json(updatedClass);
      } else {
        console.log('‚ùå [DEBUG] Aula n√£o encontrada para atualiza√ß√£o');
        res.status(404).json({ error: 'Aula n√£o encontrada' });
      }
    } catch (error) {
      console.error('üí• [DEBUG] Erro ao atualizar aula:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üóëÔ∏è DELETAR AULA
  static async deleteClass(req, res) {
    try {
      const id = parseInt(req.params.id);
      console.log('üîç [DEBUG] Deletando aula ID:', id);
      
      const classDeleted = await ClassModel.deleteClass(id);
      if (classDeleted) {
        console.log('‚úÖ [DEBUG] Aula deletada com sucesso');
        return res.status(200).json({ message: 'Aula deletada com sucesso' });
      } else {
        console.log('‚ùå [DEBUG] Aula n√£o encontrada para dele√ß√£o');
        return res.status(404).json({ error: 'Aula n√£o encontrada' });
      }
    } catch (error) {
      console.error('üí• [DEBUG] Erro ao deletar aula:', error);
      res.status(500).json({ error: 'Erro ao deletar aula' });
    }
  }

  // üìä LISTAR AULAS COM INFORMA√á√ïES DO M√ìDULO
  static async getClassesWithModuleInfo(req, res) {
    try {
      console.log('üîç [DEBUG] Buscando aulas com info do m√≥dulo...');
      
      const classes = await ClassModel.getClassesWithModuleInfo();
      
      console.log('üîç [DEBUG] Aulas com info encontradas:', classes ? classes.length : 0);
      return res.status(200).json(classes || []);
    } catch (error) {
      console.error('üí• [DEBUG] Erro getClassesWithModuleInfo:', error);
      return res.status(500).json({ error: 'Erro ao listar aulas com informa√ß√µes do m√≥dulo.' });
    }
  }
}
module.exports = ClassController;