<!-- Modal: Atribuir Trilha -->
<div id="assign-trail-modal" class="modal-overlay" style="display: none;">
    <div class="modal-container">
        <div class="modal-header">
            <h3 class="modal-title">Atribuir Trilha</h3>
            <button class="modal-close" onclick="window.Dashboard.closeModal('assign-trail-modal')">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>
        </div>
        
        <div class="modal-content">
            <form id="assign-trail-form" class="assign-form">
                <!-- Sele√ß√£o de Trilha -->
                <div class="form-group">
                    <label for="trail-select" class="form-label">
                        <span class="label-icon">üõ§Ô∏è</span>
                        Selecionar Trilha *
                    </label>
                    <div class="select-wrapper">
                        <select id="trail-select" name="trailId" class="form-select" required>
                            <option value="">Selecione uma trilha...</option>
                            <!-- Op√ß√µes ser√£o carregadas dinamicamente -->
                        </select>
                        <svg class="select-arrow" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </div>
                </div>
                
                <!-- Sele√ß√£o de PTD -->
                <div class="form-group">
                    <label for="ptd-select" class="form-label">
                        <span class="label-icon">üë§</span>
                        Selecionar PTD *
                    </label>
                    <div class="select-wrapper">
                        <select id="ptd-select" name="ptdId" class="form-select" required>
                            <option value="">Selecione um PTD...</option>
                            <!-- Op√ß√µes ser√£o carregadas dinamicamente -->
                        </select>
                        <svg class="select-arrow" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </div>
                </div>
                
                <!-- Permiss√µes Especiais (opcional) -->
                <div class="form-group">
                    <label for="permissions-input" class="form-label">
                        <span class="label-icon">üîê</span>
                        Permiss√µes Especiais (opcional)
                    </label>
                    <textarea 
                        id="permissions-input" 
                        name="permissions" 
                        class="form-textarea"
                        placeholder="Descreva permiss√µes ou instru√ß√µes especiais para esta atribui√ß√£o..."
                        maxlength="500"
                        rows="3"
                    ></textarea>
                    <div class="character-count">
                        <span id="permissions-count">0</span>/500
                    </div>
                </div>
                
                <!-- Pr√©via da Atribui√ß√£o -->
                <div id="assignment-preview" class="assignment-preview" style="display: none;">
                    <div class="preview-header">
                        <h4 class="preview-title">
                            <span class="preview-icon">üìã</span>
                            Pr√©via da Atribui√ß√£o
                        </h4>
                    </div>
                    <div class="preview-content">
                        <div class="preview-item">
                            <strong>Trilha:</strong> <span id="preview-trail-name">-</span>
                        </div>
                        <div class="preview-item">
                            <strong>PTD:</strong> <span id="preview-ptd-name">-</span>
                        </div>
                        <div class="preview-item" id="preview-permissions-item" style="display: none;">
                            <strong>Permiss√µes:</strong> <span id="preview-permissions">-</span>
                        </div>
                    </div>
                </div>
                
                <!-- Mensagens de erro -->
                <div id="assign-error-message" class="error-message" style="display: none;"></div>
            </form>
        </div>
        
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="window.Dashboard.closeModal('assign-trail-modal')">
                Cancelar
            </button>
            <button type="submit" form="assign-trail-form" class="btn btn-primary" id="assign-trail-btn">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
                Atribuir
            </button>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const assignForm = document.getElementById('assign-trail-form');
    const trailSelect = document.getElementById('trail-select');
    const ptdSelect = document.getElementById('ptd-select');
    const permissionsInput = document.getElementById('permissions-input');
    const permissionsCount = document.getElementById('permissions-count');
    const assignmentPreview = document.getElementById('assignment-preview');
    const errorMessage = document.getElementById('assign-error-message');
    
    // Contador de caracteres para permiss√µes
    if (permissionsInput && permissionsCount) {
        permissionsInput.addEventListener('input', function() {
            const count = this.value.length;
            permissionsCount.textContent = count;
            
            if (count > 450) {
                permissionsCount.style.color = '#ef4444';
            } else if (count > 350) {
                permissionsCount.style.color = '#f59e0b';
            } else {
                permissionsCount.style.color = '#6b7280';
            }
        });
    }
    
    // Atualizar pr√©via quando selections mudarem
    function updatePreview() {
        const trailOption = trailSelect.selectedOptions[0];
        const ptdOption = ptdSelect.selectedOptions[0];
        const permissions = permissionsInput.value.trim();
        
        if (trailOption && trailOption.value && ptdOption && ptdOption.value) {
            document.getElementById('preview-trail-name').textContent = trailOption.textContent;
            document.getElementById('preview-ptd-name').textContent = ptdOption.textContent;
            
            if (permissions) {
                document.getElementById('preview-permissions').textContent = permissions;
                document.getElementById('preview-permissions-item').style.display = 'block';
            } else {
                document.getElementById('preview-permissions-item').style.display = 'none';
            }
            
            assignmentPreview.style.display = 'block';
        } else {
            assignmentPreview.style.display = 'none';
        }
    }
    
    if (trailSelect) {
        trailSelect.addEventListener('change', updatePreview);
    }
    
    if (ptdSelect) {
        ptdSelect.addEventListener('change', updatePreview);
    }
    
    if (permissionsInput) {
        permissionsInput.addEventListener('input', updatePreview);
    }
    
    // Submiss√£o do formul√°rio
    if (assignForm) {
        assignForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = {
                trailId: parseInt(formData.get('trailId')),
                ptdId: parseInt(formData.get('ptdId')),
                permissions: formData.get('permissions') || null
            };
            
            // Valida√ß√µes
            if (!data.trailId || !data.ptdId) {
                showError('Por favor, selecione uma trilha e um PTD.');
                return;
            }
            
            // Desabilitar bot√£o durante envio
            const submitBtn = document.getElementById('assign-trail-btn');
            const originalContent = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<div class="btn-loading"></div> Atribuindo...';
            
            // Fazer requisi√ß√£o
            window.Dashboard.assignTrailToPTD(data)
                .then(response => {
                    if (response.success) {
                        window.Dashboard.showNotification('Trilha atribu√≠da com sucesso!', 'success');
                        window.Dashboard.closeModal('assign-trail-modal');
                        
                        // Recarregar dados relacionados
                        window.Dashboard.loadTeamProgress();
                        
                        // Limpar formul√°rio
                        assignForm.reset();
                        assignmentPreview.style.display = 'none';
                        hideError();
                    } else {
                        throw new Error(response.error || 'Erro ao atribuir trilha');
                    }
                })
                .catch(error => {
                    console.error('Erro ao atribuir trilha:', error);
                    showError(error.message || 'Erro ao atribuir trilha');
                })
                .finally(() => {
                    // Restaurar bot√£o
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalContent;
                });
        });
    }
    
    function showError(message) {
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }
    }
    
    function hideError() {
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
    }
});

// Fun√ß√£o para carregar dados do modal quando aberto
window.loadAssignTrailModalData = function() {
    const trailSelect = document.getElementById('trail-select');
    const ptdSelect = document.getElementById('ptd-select');
    
    // Limpar sele√ß√µes anteriores
    trailSelect.innerHTML = '<option value="">Carregando trilhas...</option>';
    ptdSelect.innerHTML = '<option value="">Carregando PTDs...</option>';
    
    // Carregar trilhas e PTDs dispon√≠veis
    Promise.all([
        window.Dashboard.getAvailableTrails(),
        window.Dashboard.getTeamMembers()
    ]).then(([trails, ptds]) => {
        // Popular select de trilhas
        trailSelect.innerHTML = '<option value="">Selecione uma trilha...</option>';
        trails.forEach(trail => {
            const option = document.createElement('option');
            option.value = trail.id;
            option.textContent = trail.name;
            trailSelect.appendChild(option);
        });
        
        // Popular select de PTDs
        ptdSelect.innerHTML = '<option value="">Selecione um PTD...</option>';
        ptds.forEach(ptd => {
            const option = document.createElement('option');
            option.value = ptd.ptdId;
            option.textContent = ptd.ptdName;
            ptdSelect.appendChild(option);
        });
    }).catch(error => {
        console.error('Erro ao carregar dados do modal:', error);
        trailSelect.innerHTML = '<option value="">Erro ao carregar trilhas</option>';
        ptdSelect.innerHTML = '<option value="">Erro ao carregar PTDs</option>';
    });
};
</script>