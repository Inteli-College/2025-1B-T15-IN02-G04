<!-- Modal: Criar Gestor/Admin -->
<div id="create-admin-modal" class="modal-overlay" style="display: none;">
    <div class="modal-container">
        <div class="modal-header">
            <h3 class="modal-title">Criar Gestor/Admin</h3>
            <button class="modal-close" onclick="window.Dashboard.closeModal('create-admin-modal')">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>
        </div>
        
        <div class="modal-content">
            <form id="create-admin-form" class="create-user-form">
                <!-- Nome -->
                <div class="form-group">
                    <label for="admin-name" class="form-label">
                        <span class="label-icon">üë§</span>
                        Nome Completo *
                    </label>
                    <input 
                        type="text" 
                        id="admin-name" 
                        name="name" 
                        class="form-input"
                        placeholder="Digite o nome completo"
                        required
                        minlength="2"
                        maxlength="100"
                        autocomplete="name"
                    >
                    <div class="field-error" id="admin-name-error"></div>
                </div>
                
                <!-- Username -->
                <div class="form-group">
                    <label for="admin-username" class="form-label">
                        <span class="label-icon">üè∑Ô∏è</span>
                        Nome de Usu√°rio *
                    </label>
                    <input 
                        type="text" 
                        id="admin-username" 
                        name="username" 
                        class="form-input"
                        placeholder="Digite o nome de usu√°rio"
                        required
                        minlength="3"
                        maxlength="50"
                        pattern="[a-zA-Z0-9_-]+"
                        autocomplete="username"
                    >
                    <div class="field-hint">Apenas letras, n√∫meros, _ e - s√£o permitidos</div>
                    <div class="field-error" id="admin-username-error"></div>
                </div>
                
                <!-- Email -->
                <div class="form-group">
                    <label for="admin-email" class="form-label">
                        <span class="label-icon">üìß</span>
                        Email *
                    </label>
                    <input 
                        type="email" 
                        id="admin-email" 
                        name="email" 
                        class="form-input"
                        placeholder="Digite o endere√ßo de email"
                        required
                        maxlength="255"
                        autocomplete="email"
                    >
                    <div class="field-error" id="admin-email-error"></div>
                </div>
                
                <!-- Senha -->
                <div class="form-group">
                    <label for="admin-password" class="form-label">
                        <span class="label-icon">üîí</span>
                        Senha *
                    </label>
                    <div class="password-input-wrapper">
                        <input 
                            type="password" 
                            id="admin-password" 
                            name="password" 
                            class="form-input"
                            placeholder="Digite a senha"
                            required
                            minlength="8"
                            maxlength="100"
                            autocomplete="new-password"
                        >
                        <button type="button" class="password-toggle" onclick="togglePasswordAdmin('admin-password')">
                            <svg class="eye-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                            </svg>
                        </button>
                    </div>
                    <div class="field-hint">M√≠nimo de 8 caracteres para usu√°rios administrativos</div>
                    <div class="field-error" id="admin-password-error"></div>
                </div>
                
                <!-- Confirma√ß√£o de Senha -->
                <div class="form-group">
                    <label for="admin-confirm-password" class="form-label">
                        <span class="label-icon">üîí</span>
                        Confirmar Senha *
                    </label>
                    <div class="password-input-wrapper">
                        <input 
                            type="password" 
                            id="admin-confirm-password" 
                            name="confirmPassword" 
                            class="form-input"
                            placeholder="Confirme a senha"
                            required
                            minlength="8"
                            maxlength="100"
                            autocomplete="new-password"
                        >
                        <button type="button" class="password-toggle" onclick="togglePasswordAdmin('admin-confirm-password')">
                            <svg class="eye-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 616 0z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                            </svg>
                        </button>
                    </div>
                    <div class="field-error" id="admin-confirm-password-error"></div>
                </div>
                
                <!-- Cargo/Role -->
                <div class="form-group">
                    <label for="admin-role" class="form-label">
                        <span class="label-icon">üëë</span>
                        Cargo *
                    </label>
                    <div class="select-wrapper">
                        <select id="admin-role" name="id_role" class="form-select" required>
                            <option value="">Selecione o cargo...</option>
                            <option value="2">Gestor</option>
                            <option value="1">Admin</option>
                        </select>
                        <svg class="select-arrow" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </div>
                    <div class="field-hint">Gestores gerenciam equipes de PTDs. Admins t√™m acesso total ao sistema.</div>
                    <div class="field-error" id="admin-role-error"></div>
                </div>
                
                <!-- Informa√ß√µes de seguran√ßa -->
                <div class="form-info">
                    <div class="info-card security-info">
                        <div class="info-icon">üîê</div>
                        <div class="info-content">
                            <h4 class="info-title">Pol√≠ticas de Seguran√ßa:</h4>
                            <ul class="info-list">
                                <li>Senhas devem ter no m√≠nimo 8 caracteres</li>
                                <li>Recomenda-se o uso de n√∫meros e s√≠mbolos</li>
                                <li>Credenciais ser√£o enviadas por email seguro</li>
                                <li>Primeiro login obrigat√≥rio em 24h</li>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <!-- Mensagens de erro gerais -->
                <div id="create-admin-error" class="error-message" style="display: none;"></div>
            </form>
        </div>
        
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="window.Dashboard.closeModal('create-admin-modal')">
                Cancelar
            </button>
            <button type="submit" form="create-admin-form" class="btn btn-primary" id="create-admin-btn">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                </svg>
                Criar Usu√°rio
            </button>
        </div>
    </div>
</div>

<script>
// Fun√ß√£o para alternar visibilidade da senha (vers√£o admin)
function togglePasswordAdmin(inputId) {
    const input = document.getElementById(inputId);
    const button = input.nextElementSibling;
    const icon = button.querySelector('.eye-icon');
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"/>
        `;
    } else {
        input.type = 'password';
        icon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
        `;
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const createAdminForm = document.getElementById('create-admin-form');
    const errorMessage = document.getElementById('create-admin-error');
    
    // Valida√ß√£o em tempo real
    const fields = {
        name: document.getElementById('admin-name'),
        username: document.getElementById('admin-username'),
        email: document.getElementById('admin-email'),
        password: document.getElementById('admin-password'),
        confirmPassword: document.getElementById('admin-confirm-password'),
        role: document.getElementById('admin-role')
    };
    
    // Valida√ß√£o de nome
    fields.name?.addEventListener('blur', function() {
        validateAdminField('name', this.value.trim(), {
            required: true,
            minLength: 2,
            maxLength: 100
        });
    });
    
    // Valida√ß√£o de username
    fields.username?.addEventListener('blur', function() {
        const value = this.value.trim();
        const isValid = validateAdminField('username', value, {
            required: true,
            minLength: 3,
            maxLength: 50,
            pattern: /^[a-zA-Z0-9_-]+$/
        });
        
        // Verificar disponibilidade se v√°lido
        if (isValid && value.length >= 3) {
            checkAdminUsernameAvailability(value);
        }
    });
    
    // Valida√ß√£o de email
    fields.email?.addEventListener('blur', function() {
        const value = this.value.trim();
        const isValid = validateAdminField('email', value, {
            required: true,
            email: true,
            maxLength: 255
        });
        
        // Verificar disponibilidade se v√°lido
        if (isValid && value.includes('@')) {
            checkAdminEmailAvailability(value);
        }
    });
    
    // Valida√ß√£o de senha (crit√©rios mais rigorosos para admin)
    fields.password?.addEventListener('input', function() {
        validateAdminField('password', this.value, {
            required: true,
            minLength: 8,
            maxLength: 100
        });
        
        // Revalidar confirma√ß√£o se j√° foi preenchida
        if (fields.confirmPassword.value) {
            validateAdminPasswordConfirmation();
        }
    });
    
    // Valida√ß√£o de confirma√ß√£o de senha
    fields.confirmPassword?.addEventListener('blur', validateAdminPasswordConfirmation);
    
    // Valida√ß√£o de role
    fields.role?.addEventListener('change', function() {
        validateAdminField('role', this.value, {
            required: true,
            enum: ['1', '2']
        });
    });
    
    function validateAdminPasswordConfirmation() {
        const password = fields.password.value;
        const confirmPassword = fields.confirmPassword.value;
        
        if (confirmPassword && password !== confirmPassword) {
            showAdminFieldError('confirm-password', 'As senhas n√£o coincidem');
            return false;
        } else {
            hideAdminFieldError('confirm-password');
            return true;
        }
    }
    
    function validateAdminField(fieldName, value, rules) {
        let isValid = true;
        let errorMsg = '';
        
        if (rules.required && !value) {
            errorMsg = 'Este campo √© obrigat√≥rio';
            isValid = false;
        } else if (value) {
            if (rules.minLength && value.length < rules.minLength) {
                errorMsg = `M√≠nimo de ${rules.minLength} caracteres`;
                isValid = false;
            } else if (rules.maxLength && value.length > rules.maxLength) {
                errorMsg = `M√°ximo de ${rules.maxLength} caracteres`;
                isValid = false;
            } else if (rules.pattern && !rules.pattern.test(value)) {
                errorMsg = 'Formato inv√°lido';
                isValid = false;
            } else if (rules.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
                errorMsg = 'Email inv√°lido';
                isValid = false;
            } else if (rules.enum && !rules.enum.includes(value)) {
                errorMsg = 'Sele√ß√£o inv√°lida';
                isValid = false;
            }
        }
        
        if (isValid) {
            hideAdminFieldError(fieldName);
        } else {
            showAdminFieldError(fieldName, errorMsg);
        }
        
        return isValid;
    }
    
    function showAdminFieldError(fieldName, message) {
        const errorElement = document.getElementById(`admin-${fieldName}-error`);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
    }
    
    function hideAdminFieldError(fieldName) {
        const errorElement = document.getElementById(`admin-${fieldName}-error`);
        if (errorElement) {
            errorElement.style.display = 'none';
        }
    }
    
    function checkAdminUsernameAvailability(username) {
        // Implementar verifica√ß√£o via API
        fetch('/api/check-username', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.available) {
                showAdminFieldError('username', 'Nome de usu√°rio j√° est√° em uso');
            }
        })
        .catch(() => {
            // Ignorar erro silenciosamente
        });
    }
    
    function checkAdminEmailAvailability(email) {
        // Implementar verifica√ß√£o via API
        fetch('/api/check-email', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.available) {
                showAdminFieldError('email', 'Email j√° est√° em uso');
            }
        })
        .catch(() => {
            // Ignorar erro silenciosamente
        });
    }
    
    // Submiss√£o do formul√°rio
    createAdminForm?.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Validar todos os campos
        const formData = new FormData(this);
        const data = {
            name: formData.get('name').trim(),
            username: formData.get('username').trim(),
            email: formData.get('email').trim(),
            password: formData.get('password'),
            confirmPassword: formData.get('confirmPassword'),
            id_role: parseInt(formData.get('id_role'))
        };
        
        // Valida√ß√µes finais
        let isValid = true;
        
        if (!validateAdminField('name', data.name, { required: true, minLength: 2, maxLength: 100 })) isValid = false;
        if (!validateAdminField('username', data.username, { required: true, minLength: 3, maxLength: 50, pattern: /^[a-zA-Z0-9_-]+$/ })) isValid = false;
        if (!validateAdminField('email', data.email, { required: true, email: true, maxLength: 255 })) isValid = false;
        if (!validateAdminField('password', data.password, { required: true, minLength: 8, maxLength: 100 })) isValid = false;
        if (!validateAdminField('role', data.id_role.toString(), { required: true, enum: ['1', '2'] })) isValid = false;
        if (!validateAdminPasswordConfirmation()) isValid = false;
        
        if (!isValid) {
            showAdminError('Por favor, corrija os erros no formul√°rio.');
            return;
        }
        
        // Remover confirmPassword dos dados enviados
        delete data.confirmPassword;
        
        // Desabilitar bot√£o durante envio
        const submitBtn = document.getElementById('create-admin-btn');
        const originalContent = submitBtn.innerHTML;
        submitBtn.disabled = true;
        
        const roleName = data.id_role === 1 ? 'Admin' : 'Gestor';
        submitBtn.innerHTML = `<div class="btn-loading"></div> Criando ${roleName}...`;
        
        // Fazer requisi√ß√£o
        window.Dashboard.createGestorAdmin(data)
            .then(response => {
                if (response.success) {
                    window.Dashboard.showNotification(`${roleName} criado com sucesso!`, 'success');
                    window.Dashboard.closeModal('create-admin-modal');
                    
                    // Limpar formul√°rio
                    createAdminForm.reset();
                    hideAdminError();
                    
                    // Limpar erros de campo
                    Object.keys(fields).forEach(fieldName => {
                        hideAdminFieldError(fieldName);
                    });
                } else {
                    throw new Error(response.error || `Erro ao criar ${roleName}`);
                }
            })
            .catch(error => {
                console.error('Erro ao criar usu√°rio administrativo:', error);
                showAdminError(error.message || 'Erro ao criar usu√°rio');
            })
            .finally(() => {
                // Restaurar bot√£o
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalContent;
            });
    });
    
    function showAdminError(message) {
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }
    }
    
    function hideAdminError() {
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
    }
});
</script>