<!-- Modal: Criar PTD -->
<div id="create-ptd-modal" class="modal-overlay" style="display: none;">
    <div class="modal-container">
        <div class="modal-header">
            <h3 class="modal-title">Criar PTD</h3>
            <button class="modal-close" onclick="window.Dashboard.closeModal('create-ptd-modal')">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>
        </div>
        
        <div class="modal-content">
            <form id="create-ptd-form" class="create-user-form">
                <!-- Nome -->
                <div class="form-group">
                    <label for="ptd-name" class="form-label">
                        <span class="label-icon">üë§</span>
                        Nome Completo *
                    </label>
                    <input 
                        type="text" 
                        id="ptd-name" 
                        name="name" 
                        class="form-input"
                        placeholder="Digite o nome completo"
                        required
                        minlength="2"
                        maxlength="100"
                        autocomplete="name"
                    >
                    <div class="field-error" id="name-error"></div>
                </div>
                
                <!-- Username -->
                <div class="form-group">
                    <label for="ptd-username" class="form-label">
                        <span class="label-icon">üè∑Ô∏è</span>
                        Nome de Usu√°rio *
                    </label>
                    <input 
                        type="text" 
                        id="ptd-username" 
                        name="username" 
                        class="form-input"
                        placeholder="Digite o nome de usu√°rio"
                        required
                        minlength="3"
                        maxlength="50"
                        pattern="[a-zA-Z0-9_-]+"
                        autocomplete="username"
                    >
                    <div class="field-hint">Apenas letras, n√∫meros, _ e - s√£o permitidos</div>
                    <div class="field-error" id="username-error"></div>
                </div>
                
                <!-- Email -->
                <div class="form-group">
                    <label for="ptd-email" class="form-label">
                        <span class="label-icon">üìß</span>
                        Email *
                    </label>
                    <input 
                        type="email" 
                        id="ptd-email" 
                        name="email" 
                        class="form-input"
                        placeholder="Digite o endere√ßo de email"
                        required
                        maxlength="255"
                        autocomplete="email"
                    >
                    <div class="field-error" id="email-error"></div>
                </div>
                
                <!-- Senha -->
                <div class="form-group">
                    <label for="ptd-password" class="form-label">
                        <span class="label-icon">üîí</span>
                        Senha *
                    </label>
                    <div class="password-input-wrapper">
                        <input 
                            type="password" 
                            id="ptd-password" 
                            name="password" 
                            class="form-input"
                            placeholder="Digite a senha"
                            required
                            minlength="6"
                            maxlength="100"
                            autocomplete="new-password"
                        >
                        <button type="button" class="password-toggle" onclick="togglePassword('ptd-password')">
                            <svg class="eye-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                            </svg>
                        </button>
                    </div>
                    <div class="field-hint">M√≠nimo de 6 caracteres</div>
                    <div class="field-error" id="password-error"></div>
                </div>
                
                <!-- Confirma√ß√£o de Senha -->
                <div class="form-group">
                    <label for="ptd-confirm-password" class="form-label">
                        <span class="label-icon">üîí</span>
                        Confirmar Senha *
                    </label>
                    <div class="password-input-wrapper">
                        <input 
                            type="password" 
                            id="ptd-confirm-password" 
                            name="confirmPassword" 
                            class="form-input"
                            placeholder="Confirme a senha"
                            required
                            minlength="6"
                            maxlength="100"
                            autocomplete="new-password"
                        >
                        <button type="button" class="password-toggle" onclick="togglePassword('ptd-confirm-password')">
                            <svg class="eye-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                            </svg>
                        </button>
                    </div>
                    <div class="field-error" id="confirm-password-error"></div>
                </div>
                
                <!-- Informa√ß√µes adicionais -->
                <div class="form-info">
                    <div class="info-card">
                        <div class="info-icon">‚ÑπÔ∏è</div>
                        <div class="info-content">
                            <h4 class="info-title">Informa√ß√µes importantes:</h4>
                            <ul class="info-list">
                                <li>O PTD ser√° automaticamente adicionado √† sua equipe</li>
                                <li>Um email de boas-vindas ser√° enviado com as credenciais</li>
                                <li>O PTD ter√° acesso imediato √† plataforma</li>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <!-- Mensagens de erro gerais -->
                <div id="create-ptd-error" class="error-message" style="display: none;"></div>
            </form>
        </div>
        
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="window.Dashboard.closeModal('create-ptd-modal')">
                Cancelar
            </button>
            <button type="submit" form="create-ptd-form" class="btn btn-primary" id="create-ptd-btn">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                </svg>
                Criar PTD
            </button>
        </div>
    </div>
</div>

<script>
// Fun√ß√£o para alternar visibilidade da senha
function togglePassword(inputId) {
    const input = document.getElementById(inputId);
    const button = input.nextElementSibling;
    const icon = button.querySelector('.eye-icon');
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"/>
        `;
    } else {
        input.type = 'password';
        icon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
        `;
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const createPTDForm = document.getElementById('create-ptd-form');
    const errorMessage = document.getElementById('create-ptd-error');
    
    // Valida√ß√£o em tempo real
    const fields = {
        name: document.getElementById('ptd-name'),
        username: document.getElementById('ptd-username'),
        email: document.getElementById('ptd-email'),
        password: document.getElementById('ptd-password'),
        confirmPassword: document.getElementById('ptd-confirm-password')
    };
    
    // Valida√ß√£o de nome
    fields.name?.addEventListener('blur', function() {
        validateField('name', this.value.trim(), {
            required: true,
            minLength: 2,
            maxLength: 100
        });
    });
    
    // Valida√ß√£o de username
    fields.username?.addEventListener('blur', function() {
        const value = this.value.trim();
        const isValid = validateField('username', value, {
            required: true,
            minLength: 3,
            maxLength: 50,
            pattern: /^[a-zA-Z0-9_-]+$/
        });
        
        // Verificar disponibilidade se v√°lido
        if (isValid && value.length >= 3) {
            checkUsernameAvailability(value);
        }
    });
    
    // Valida√ß√£o de email
    fields.email?.addEventListener('blur', function() {
        const value = this.value.trim();
        const isValid = validateField('email', value, {
            required: true,
            email: true,
            maxLength: 255
        });
        
        // Verificar disponibilidade se v√°lido
        if (isValid && value.includes('@')) {
            checkEmailAvailability(value);
        }
    });
    
    // Valida√ß√£o de senha
    fields.password?.addEventListener('input', function() {
        validateField('password', this.value, {
            required: true,
            minLength: 6,
            maxLength: 100
        });
        
        // Revalidar confirma√ß√£o se j√° foi preenchida
        if (fields.confirmPassword.value) {
            validatePasswordConfirmation();
        }
    });
    
    // Valida√ß√£o de confirma√ß√£o de senha
    fields.confirmPassword?.addEventListener('blur', validatePasswordConfirmation);
    
    function validatePasswordConfirmation() {
        const password = fields.password.value;
        const confirmPassword = fields.confirmPassword.value;
        
        if (confirmPassword && password !== confirmPassword) {
            showFieldError('confirm-password', 'As senhas n√£o coincidem');
            return false;
        } else {
            hideFieldError('confirm-password');
            return true;
        }
    }
    
    function validateField(fieldName, value, rules) {
        let isValid = true;
        let errorMsg = '';
        
        if (rules.required && !value) {
            errorMsg = 'Este campo √© obrigat√≥rio';
            isValid = false;
        } else if (value) {
            if (rules.minLength && value.length < rules.minLength) {
                errorMsg = `M√≠nimo de ${rules.minLength} caracteres`;
                isValid = false;
            } else if (rules.maxLength && value.length > rules.maxLength) {
                errorMsg = `M√°ximo de ${rules.maxLength} caracteres`;
                isValid = false;
            } else if (rules.pattern && !rules.pattern.test(value)) {
                errorMsg = 'Formato inv√°lido';
                isValid = false;
            } else if (rules.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
                errorMsg = 'Email inv√°lido';
                isValid = false;
            }
        }
        
        if (isValid) {
            hideFieldError(fieldName);
        } else {
            showFieldError(fieldName, errorMsg);
        }
        
        return isValid;
    }
    
    function showFieldError(fieldName, message) {
        const errorElement = document.getElementById(`${fieldName}-error`);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
    }
    
    function hideFieldError(fieldName) {
        const errorElement = document.getElementById(`${fieldName}-error`);
        if (errorElement) {
            errorElement.style.display = 'none';
        }
    }
    
    function checkUsernameAvailability(username) {
        // Implementar verifica√ß√£o via API
        fetch('/api/check-username', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.available) {
                showFieldError('username', 'Nome de usu√°rio j√° est√° em uso');
            }
        })
        .catch(() => {
            // Ignorar erro silenciosamente para n√£o atrapalhar UX
        });
    }
    
    function checkEmailAvailability(email) {
        // Implementar verifica√ß√£o via API
        fetch('/api/check-email', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.available) {
                showFieldError('email', 'Email j√° est√° em uso');
            }
        })
        .catch(() => {
            // Ignorar erro silenciosamente para n√£o atrapalhar UX
        });
    }
    
    // Submiss√£o do formul√°rio
    createPTDForm?.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Validar todos os campos
        const formData = new FormData(this);
        const data = {
            name: formData.get('name').trim(),
            username: formData.get('username').trim(),
            email: formData.get('email').trim(),
            password: formData.get('password'),
            confirmPassword: formData.get('confirmPassword')
        };
        
        // Valida√ß√µes finais
        let isValid = true;
        
        if (!validateField('name', data.name, { required: true, minLength: 2, maxLength: 100 })) isValid = false;
        if (!validateField('username', data.username, { required: true, minLength: 3, maxLength: 50, pattern: /^[a-zA-Z0-9_-]+$/ })) isValid = false;
        if (!validateField('email', data.email, { required: true, email: true, maxLength: 255 })) isValid = false;
        if (!validateField('password', data.password, { required: true, minLength: 6, maxLength: 100 })) isValid = false;
        if (!validatePasswordConfirmation()) isValid = false;
        
        if (!isValid) {
            showError('Por favor, corrija os erros no formul√°rio.');
            return;
        }
        
        // Remover confirmPassword dos dados enviados
        delete data.confirmPassword;
        
        // Desabilitar bot√£o durante envio
        const submitBtn = document.getElementById('create-ptd-btn');
        const originalContent = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<div class="btn-loading"></div> Criando PTD...';
        
        // Fazer requisi√ß√£o
        window.Dashboard.createPTD(data)
            .then(response => {
                if (response.success) {
                    window.Dashboard.showNotification('PTD criado e adicionado √† equipe com sucesso!', 'success');
                    window.Dashboard.closeModal('create-ptd-modal');
                    
                    // Recarregar dados relacionados
                    window.Dashboard.loadTeamMembers();
                    
                    // Limpar formul√°rio
                    createPTDForm.reset();
                    hideError();
                    
                    // Limpar erros de campo
                    Object.keys(fields).forEach(fieldName => {
                        hideFieldError(fieldName);
                    });
                } else {
                    throw new Error(response.error || 'Erro ao criar PTD');
                }
            })
            .catch(error => {
                console.error('Erro ao criar PTD:', error);
                showError(error.message || 'Erro ao criar PTD');
            })
            .finally(() => {
                // Restaurar bot√£o
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalContent;
            });
    });
    
    function showError(message) {
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }
    }
    
    function hideError() {
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
    }
});
</script>