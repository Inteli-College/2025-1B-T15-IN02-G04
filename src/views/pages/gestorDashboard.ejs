<div class="container mx-auto py-10">
  <h1 class="text-3xl font-bold text-field-blue mb-6 text-center">
    Painel de Gestão
  </h1>

  <!-- Carrossel de Usuários -->
  <div class="relative flex items-center justify-center mb-4">
    <!-- Botão esquerdo -->
    <button id="carousel-left" type="button" aria-label="Anterior"
      class="absolute left-0 ml-2 bg-field-green text-white p-2 rounded-full shadow-lg transform -translate-x-full opacity-0 transition-opacity duration-300 disabled:opacity-0">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>

    <div id="carousel" class="flex overflow-x-auto space-x-4 py-4 px-2 scrollbar-thin scrollbar-thumb-field-green/70 scrollbar-track-transparent">
      <!-- Cartões são adicionados dinamicamente -->
    </div>

    <!-- Botão direito -->
    <button id="carousel-right" type="button" aria-label="Próximo"
      class="absolute right-0 mr-2 bg-field-green text-white p-2 rounded-full shadow-lg transform translate-x-full opacity-0 transition-opacity duration-300 disabled:opacity-0">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>

  <!-- Barra de busca -->
  <div class="flex justify-end mb-4 items-center space-x-2">
    <!-- Botão da lupa -->
    <button id="search-toggle" aria-label="Pesquisar" type="button"
      class="text-gray-600 hover:text-field-green transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-4.35-4.35M17 11a6 6 0 11-12 0 6 6 0 0112 0z" />
      </svg>
    </button>

    <!-- Campo de pesquisa -->
    <input type="text" id="search-input" placeholder="Pesquisar..."
      class="w-0 opacity-0 border border-gray-300 rounded-lg py-2 px-4 transition-all duration-300 ease-in-out focus:outline-none" />
  </div>

  <!-- Ranking + Gráfico -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">

    <!-- Tabela de Ranking -->
    <div class="overflow-x-auto rounded-lg shadow overflow-y-auto h-[300px]">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-field-green">
          <tr>
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium tracking-wider text-white uppercase"
            >
              Posição
            </th>
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium tracking-wider text-white uppercase"
            >
              Nome
            </th>
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium tracking-wider text-white uppercase"
            >
              Score
            </th>
          </tr>
        </thead>
        <tbody id="ranking-body" class="bg-white divide-y divide-gray-200">
          <!-- Linhas serão adicionadas dinamicamente -->
        </tbody>
      </table>
    </div>

    <!-- Gráfico de Ranking -->
    <div class="bg-white rounded-lg shadow p-2 h-[300px] flex flex-col">
      <div class="flex justify-between items-center mb-2">
        <h3 class="text-lg font-semibold text-field-blue">Top 5</h3>
        <select id="metric-select" class="border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none">
          <option value="score">Score</option>
          <option value="posts">Posts</option>
        </select>
      </div>
      <canvas id="chart-score" class="w-full h-full"></canvas>
    </div>

  </div>

  <!-- Analytics -->
  <h2 class="text-2xl font-semibold text-field-blue mt-8 mb-4 text-center">Analytics</h2>
  <!-- Agora exibimos apenas três cartões, portanto usamos três colunas no desktop -->
  <div id="analytics" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"></div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const tbody = document.getElementById("ranking-body");
    const searchInput = document.getElementById("search-input");
    const searchToggle = document.getElementById("search-toggle");

    let rankingData = [];

    const carousel = document.getElementById("carousel");
    const btnLeft = document.getElementById("carousel-left");
    const btnRight = document.getElementById("carousel-right");

    const analyticsContainer = document.getElementById("analytics");
    const chartCanvas = document.getElementById("chart-score");
    const metricSelect = document.getElementById("metric-select");

    let postsData = null; // Cache de posts

    const renderCarousel = (data) => {
      carousel.innerHTML = "";

      if (!data.length) {
        carousel.innerHTML = `<p class="text-gray-500 ml-4">Nenhum usuário encontrado</p>`;
        return;
      }

      // Ordena alfabeticamente pelo nome (case-insensitive, PT-BR)
      const sorted = [...data].sort((a, b) =>
        (a.name || "").localeCompare(b.name || "", "pt", {
          sensitivity: "base",
        })
      );

      sorted.forEach((usuario) => {
        const card = document.createElement("div");
        card.className =
          "min-w-[120px] flex-shrink-0 bg-white rounded-lg shadow hover:shadow-md transition-shadow cursor-pointer text-center p-4";
        card.addEventListener("click", () => {
          window.location.href = `/perfil/${usuario.id}`;
        });

        const avatarUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(
          usuario.name ?? "U"
        )}&background=FF5D9C&color=fff&size=128`;

        card.innerHTML = `
          <img src="${avatarUrl}" alt="Avatar" class="w-16 h-16 mx-auto rounded-full mb-2" />
          <p class="text-sm font-medium text-gray-700 truncate max-w-[100px] mx-auto">${
            usuario.name ?? "-"
          }</p>
        `;

        carousel.appendChild(card);
      });
    };

    const renderAnalytics = (data) => {
      if (!data.length) {
        analyticsContainer.innerHTML = "<p class='text-gray-500 text-center col-span-full'>Sem dados para analytics</p>";
        return;
      }

      const total = data.length;
      const ptdCount = data.filter((u) => (u.roles || []).includes("PTD")).length;
      const somaScores = data.reduce((sum, u) => sum + (u.score ?? 0), 0);
      const mediaScore = (somaScores / (total || 1)).toFixed(1);
      const topScore = Math.max(...data.map((u) => u.score ?? 0));
      const topUser = data.find((u) => (u.score ?? 0) === topScore) || {};

      analyticsContainer.innerHTML = `
        <div class="bg-white rounded-lg shadow p-4 text-center">
          <p class="text-sm text-gray-500">Total de PTDs</p>
          <p class="text-3xl font-bold text-field-green">${ptdCount}</p>
        </div>
        <div class="bg-white rounded-lg shadow p-4 text-center">
          <p class="text-sm text-gray-500">Média de Score</p>
          <p class="text-3xl font-bold text-field-green">${mediaScore}</p>
        </div>
        <div class="bg-white rounded-lg shadow p-4 text-center">
          <p class="text-sm text-gray-500">Score Máximo</p>
          <p class="text-3xl font-bold text-field-green">${topScore}</p>
          <p class="text-xs text-gray-500 truncate">${topUser.name ?? ""}</p>
        </div>`;
    };

    const renderChart = async (data, metric = metricSelect?.value || "score") => {
      if (!chartCanvas) return;

      const drawChart = (labels, values, labelName, backgroundColor) => {
        if (window._scoreChart) {
          window._scoreChart.destroy();
        }

        // Ajusta dinamicamente a altura do canvas ao container (evita crescimento e preenche melhor)
        const parentHeight = chartCanvas.parentElement.clientHeight;
        chartCanvas.height = parentHeight;
        chartCanvas.style.height = parentHeight + "px";

        window._scoreChart = new Chart(chartCanvas, {
          type: "bar",
          data: {
            labels,
            datasets: [
              {
                label: labelName,
                data: values,
                backgroundColor,
              },
            ],
          },
          options: {
            plugins: { legend: { display: false } },
            scales: { y: { beginAtZero: true } },
            maintainAspectRatio: false,
          },
        });
      };

      const buildDataByScore = () => {
        const topFive = [...data]
          .sort((a, b) => (b.score ?? 0) - (a.score ?? 0))
          .slice(0, 5);

        const labels = topFive.map((u) => u.name ?? "-");
        const values = topFive.map((u) => u.score ?? 0);

        drawChart(labels, values, "Top 5 Scores", "#72b500");
      };

      const buildDataByPosts = async () => {
        // Busca posts se ainda não temos
        if (!postsData) {
          try {
            const resp = await fetch("/api/posts");
            if (!resp.ok) throw new Error("Erro ao buscar posts");
            postsData = await resp.json();
          } catch (err) {
            console.error(err);
            return;
          }
        }

        // Contar posts por autor
        const counts = {};
        postsData.forEach((p) => {
          const autor = p.autor || "Desconhecido";
          counts[autor] = (counts[autor] || 0) + 1;
        });

        const sorted = Object.entries(counts)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 5);

        const labels = sorted.map((i) => i[0]);
        const values = sorted.map((i) => i[1]);

        drawChart(labels, values, "Top 5 Posts", "#3B82F6");
      };

      const exec = async () => {
        if (metric === "posts") {
          await buildDataByPosts();
        } else {
          buildDataByScore();
        }
      };

      if (typeof Chart === "undefined") {
        const script = document.createElement("script");
        script.src = "https://cdn.jsdelivr.net/npm/chart.js";
        script.onload = exec;
        document.body.appendChild(script);
      } else {
        exec();
      }
    };

    const renderRows = (data) => {
      tbody.innerHTML = "";

      if (!data.length) {
        tbody.innerHTML = `
          <tr>
            <td colspan="3" class="px-6 py-4 text-center text-gray-500">
              Nenhum resultado encontrado.
            </td>
          </tr>`;
        return;
      }

      data.forEach((usuario, index) => {
        const tr = document.createElement("tr");
        tr.classList.add("cursor-pointer", "hover:bg-gray-100");
        tr.addEventListener("click", () => {
          window.location.href = `/perfil/${usuario.id}`;
        });
        tr.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${
            usuario.position
          }</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-700">${
            usuario.name ?? "-"
          }</td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${
            usuario.score ?? 0
          }</td>
        `;
        tbody.appendChild(tr);
      });
    };

    // Fetch inicial
    try {
      const response = await fetch("/api/usuarios/ranking");
      if (!response.ok) throw new Error("Erro ao buscar ranking de usuários");

      rankingData = (await response.json()).sort(
        (a, b) => (b.score ?? 0) - (a.score ?? 0)
      );

      // Guarda posição original
      rankingData.forEach((u, idx) => (u.position = idx + 1));

      renderRows(rankingData);
      renderCarousel(rankingData);
      renderAnalytics(rankingData);
      renderChart(rankingData);
    } catch (error) {
      console.error(error);
      tbody.innerHTML = `
        <tr>
          <td colspan="3" class="px-6 py-4 text-center text-red-500">
            Erro ao carregar dados do ranking.
          </td>
        </tr>`;
    }

    // Ação da lupa
    searchToggle.addEventListener("click", () => {
      if (searchInput.classList.contains("w-0")) {
        searchInput.classList.remove("w-0", "opacity-0");
        searchInput.classList.add("w-64", "opacity-100");
        searchInput.focus();
      } else {
        searchInput.value = "";
        renderRows(rankingData);
        renderCarousel(rankingData);
        renderAnalytics(rankingData);
        renderChart(rankingData);
        searchInput.classList.remove("w-64", "opacity-100");
        searchInput.classList.add("w-0", "opacity-0");
      }
    });

    // Filtro em tempo real
    searchInput.addEventListener("input", (e) => {
      const query = e.target.value.toLowerCase();
      const filtered = rankingData.filter((u) =>
        (u.name || "").toLowerCase().includes(query)
      );
      renderRows(filtered);
      renderCarousel(filtered);
      renderAnalytics(filtered);
      renderChart(filtered);
      updateArrows();
    });

    // Funções de seta
    const updateArrows = () => {
      const scrollLeft = carousel.scrollLeft;
      const maxScroll = carousel.scrollWidth - carousel.clientWidth;
      btnLeft.style.opacity = scrollLeft > 10 ? "1" : "0";
      btnRight.style.opacity = scrollLeft < maxScroll - 10 ? "1" : "0";
    };

    carousel.addEventListener("scroll", updateArrows);

    btnLeft.addEventListener("click", () => {
      carousel.scrollBy({ left: -200, behavior: "smooth" });
    });

    btnRight.addEventListener("click", () => {
      carousel.scrollBy({ left: 200, behavior: "smooth" });
    });

    // Atualiza setas após render inicial
    setTimeout(updateArrows, 100);

    // Troca de métrica
    if (metricSelect) {
      metricSelect.addEventListener("change", () => {
        renderChart(rankingData, metricSelect.value);
      });
    }
  });
</script>
