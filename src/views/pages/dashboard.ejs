<!-- Dashboard Page Content -->
<div class="dashboard-page">
    <!-- Meta para JavaScript -->
    <script>
        window.dashboardConfig = {
            userId: '<%= dashboardData.user.id %>',
            userRole: '<%= dashboardData.user.primaryRole.id_role %>',
            apiBase: '/api/dashboard',
            userName: '<%= dashboardData.user.name %>',
            userRoleName: '<%= dashboardData.user.primaryRole.role_name %>'
        };
    </script>
    
    <!-- Header do Dashboard -->
    <header class="dashboard-header">
        <div class="header-container">
            <!-- Informa√ß√µes do usu√°rio -->
            <div class="header-welcome">
                <h1 class="welcome-message">Ol√°, <%= dashboardData.user.name %>!</h1>
                <span class="user-role-badge"><%= dashboardData.user.primaryRole.role_name %></span>
            </div>
            
            <!-- A√ß√µes do header -->
            <div class="header-actions">
                <button id="refresh-dashboard" class="action-btn" title="Atualizar dados">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                </button>
                <button id="dashboard-notifications" class="action-btn" title="Notifica√ß√µes">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"/>
                    </svg>
                    <span class="notification-badge" style="display: none;">0</span>
                </button>
            </div>
        </div>
    </header>

    <!-- Loading Overlay -->
    <div id="dashboard-loading" class="loading-overlay hidden">
        <div class="loading-spinner"></div>
        <p class="loading-text">Carregando dados...</p>
    </div>
    
    <!-- Dashboard Content -->
    <main class="dashboard-main">
        <div class="dashboard-container">
            
            <!-- Dashboard espec√≠fico baseado no role -->
            <% if (dashboardData.user.primaryRole.id_role == 3) { %>
                <%- include('../components/ptd-dashboard', {data: dashboardData}) %>
            <% } else if (dashboardData.user.primaryRole.id_role == 2) { %>
                <%- include('../components/gestor-dashboard', {data: dashboardData}) %>
            <% } else if (dashboardData.user.primaryRole.id_role == 1) { %>
                <%- include('../components/admin-dashboard', {data: dashboardData}) %>
            <% } else { %>
                <!-- Fallback para role n√£o reconhecido -->
                <div class="error-container">
                    <div class="error-icon">‚ö†Ô∏è</div>
                    <h2 class="error-title">Erro de Permiss√µes</h2>
                    <p class="error-message">Seu perfil n√£o possui permiss√µes adequadas para acessar o dashboard.</p>
                    <a href="/api/auth/logout" class="btn btn-primary">Sair do Sistema</a>
                </div>
            <% } %>
            
        </div>
    </main>

    <!-- Notifica√ß√µes Toast -->
    <div id="toast-container" class="toast-container"></div>

    <!-- Modais - Incluir todos os modais necess√°rios -->
    <% if (dashboardData.user.primaryRole.id_role == 2) { %>
        <!-- Modais para Gestor -->
        <%- include('../components/modals/add-ptd-modal') %>
        <%- include('../components/modals/assign-trail-modal') %>
        <%- include('../components/modals/create-ptd-modal') %>
    <% } %>
    
    <% if (dashboardData.user.primaryRole.id_role == 1) { %>
        <!-- Modais para Admin -->
        <%- include('../components/modals/create-admin-modal') %>
    <% } %>

    <!-- Scripts do Dashboard - Ordem importante! -->
    <script src="/scripts/dashboard-core.js"></script>
    <script src="/scripts/dashboard-notifications.js"></script>
    <script src="/scripts/dashboard-modals.js"></script>
    <script src="/scripts/dashboard-api.js"></script>
    <script src="/scripts/dashboard-debug.js"></script>
    
    <!-- Inicializa√ß√£o do Dashboard -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üöÄ [DASHBOARD] Inicializando dashboard...');
        
        // Configura√ß√£o baseada nos dados do usu√°rio
        const userConfig = {
            user: '<%= dashboardData.user.name %>',
            role: parseInt('<%= dashboardData.user.primaryRole.id_role %>'),
            apiBase: '/api/dashboard'
        };
        
        // Marcar roles no req object (simula√ß√£o para JavaScript)
        window.dashboardState = {
            isPTD: userConfig.role === 3,
            isGestor: userConfig.role === 2,
            isAdmin: userConfig.role === 1
        };
        
        console.log('üë§ [DASHBOARD] Estado do usu√°rio:', window.dashboardState);
        
        // Aguardar que todos os scripts carreguem
        setTimeout(() => {
            // Inicializar o sistema de dashboard
            if (window.Dashboard) {
                try {
                    window.Dashboard.init(userConfig);
                    console.log('‚úÖ [DASHBOARD] Dashboard inicializado com sucesso');
                } catch (error) {
                    console.error('‚ùå [DASHBOARD] Erro na inicializa√ß√£o:', error);
                }
            } else {
                console.error('‚ùå [DASHBOARD] Sistema de dashboard n√£o encontrado');
            }
            
            // Configurar event listeners espec√≠ficos para modais
            setupModalEventListeners();
        }, 100); // Pequeno delay para garantir que scripts carregaram
    });

    function setupModalEventListeners() {
        console.log('üîó [DASHBOARD] Configurando event listeners dos modais...');
        
        // Event listeners para Gestor
        if (window.dashboardState && window.dashboardState.isGestor) {
            console.log('üë®‚Äçüíº [DASHBOARD] Configurando listeners para Gestor');
            
            // Bot√£o Adicionar PTD
            const addPTDBtn = document.getElementById('add-ptd-btn');
            if (addPTDBtn) {
                // Remover listeners existentes
                addPTDBtn.replaceWith(addPTDBtn.cloneNode(true));
                const newAddPTDBtn = document.getElementById('add-ptd-btn');
                
                newAddPTDBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('‚ûï [DASHBOARD] Clique em Adicionar PTD detectado');
                    
                    if (window.openAddPTDModal) {
                        window.openAddPTDModal();
                    } else {
                        console.error('‚ùå [DASHBOARD] Fun√ß√£o openAddPTDModal n√£o encontrada');
                        alert('Fun√ß√£o n√£o encontrada. Recarregue a p√°gina.');
                    }
                });
                
                console.log('‚úÖ [DASHBOARD] Listener do bot√£o Adicionar PTD configurado');
            } else {
                console.warn('‚ö†Ô∏è [DASHBOARD] Bot√£o Adicionar PTD n√£o encontrado');
            }
            
            // Bot√£o Atribuir Trilha
            const assignTrailBtn = document.getElementById('assign-trail-btn');
            if (assignTrailBtn) {
                assignTrailBtn.replaceWith(assignTrailBtn.cloneNode(true));
                const newAssignTrailBtn = document.getElementById('assign-trail-btn');
                
                newAssignTrailBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üéØ [DASHBOARD] Clique em Atribuir Trilha detectado');
                    
                    if (window.openAssignTrailModal) {
                        window.openAssignTrailModal();
                    } else {
                        console.error('‚ùå [DASHBOARD] Fun√ß√£o openAssignTrailModal n√£o encontrada');
                        alert('Fun√ß√£o n√£o encontrada. Recarregue a p√°gina.');
                    }
                });
                
                console.log('‚úÖ [DASHBOARD] Listener do bot√£o Atribuir Trilha configurado');
            } else {
                console.warn('‚ö†Ô∏è [DASHBOARD] Bot√£o Atribuir Trilha n√£o encontrado');
            }
            
            // Bot√£o Criar PTD
            const createPTDBtn = document.getElementById('create-ptd-btn');
            if (createPTDBtn) {
                createPTDBtn.replaceWith(createPTDBtn.cloneNode(true));
                const newCreatePTDBtn = document.getElementById('create-ptd-btn');
                
                newCreatePTDBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üë§ [DASHBOARD] Clique em Criar PTD detectado');
                    
                    if (window.openCreatePTDModal) {
                        window.openCreatePTDModal();
                    } else {
                        console.error('‚ùå [DASHBOARD] Fun√ß√£o openCreatePTDModal n√£o encontrada');
                        alert('Fun√ß√£o n√£o encontrada. Recarregue a p√°gina.');
                    }
                });
                
                console.log('‚úÖ [DASHBOARD] Listener do bot√£o Criar PTD configurado');
            } else {
                console.warn('‚ö†Ô∏è [DASHBOARD] Bot√£o Criar PTD n√£o encontrado');
            }
        }
        
        // Event listeners para Admin
        if (window.dashboardState && window.dashboardState.isAdmin) {
            console.log('üëë [DASHBOARD] Configurando listeners para Admin');
            
            // Bot√£o Criar Gestor/Admin
            const createUserBtn = document.getElementById('create-user-btn');
            if (createUserBtn) {
                createUserBtn.replaceWith(createUserBtn.cloneNode(true));
                const newCreateUserBtn = document.getElementById('create-user-btn');
                
                newCreateUserBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üë§ [DASHBOARD] Clique em Criar Gestor/Admin detectado');
                    
                    if (window.openCreateAdminModal) {
                        window.openCreateAdminModal();
                    } else {
                        console.error('‚ùå [DASHBOARD] Fun√ß√£o openCreateAdminModal n√£o encontrada');
                        alert('Fun√ß√£o n√£o encontrada. Recarregue a p√°gina.');
                    }
                });
                
                console.log('‚úÖ [DASHBOARD] Listener do bot√£o Criar Gestor/Admin configurado');
            } else {
                console.warn('‚ö†Ô∏è [DASHBOARD] Bot√£o Criar Gestor/Admin n√£o encontrado');
            }
        }
        
        console.log('üîó [DASHBOARD] Event listeners configurados');
    }

    // Fun√ß√µes globais para abrir modais
    window.openAddPTDModal = function() {
        console.log('ü™ü [MODAL] Fun√ß√£o openAddPTDModal chamada');
        
        if (window.DashboardModals && window.DashboardModals.openAddPTDModal) {
            console.log('ü™ü [MODAL] Chamando DashboardModals.openAddPTDModal');
            window.DashboardModals.openAddPTDModal();
        } else if (window.Dashboard && window.Dashboard.openAddPTDModal) {
            console.log('ü™ü [MODAL] Chamando Dashboard.openAddPTDModal');
            window.Dashboard.openAddPTDModal();
        } else {
            console.error('‚ùå [MODAL] Nenhum sistema de modais dispon√≠vel');
            console.log('  - DashboardModals:', typeof window.DashboardModals);
            console.log('  - Dashboard:', typeof window.Dashboard);
            alert('Sistema de modais n√£o est√° funcionando. Verifique o console e recarregue a p√°gina.');
        }
    };

    window.openAssignTrailModal = function() {
        console.log('ü™ü [MODAL] Fun√ß√£o openAssignTrailModal chamada');
        
        if (window.DashboardModals && window.DashboardModals.openAssignTrailModal) {
            window.DashboardModals.openAssignTrailModal();
        } else if (window.Dashboard && window.Dashboard.openAssignTrailModal) {
            window.Dashboard.openAssignTrailModal();
        } else {
            console.error('‚ùå [MODAL] Sistema de modais n√£o dispon√≠vel');
            alert('Sistema de modais n√£o est√° funcionando. Recarregue a p√°gina.');
        }
    };

    window.openCreatePTDModal = function() {
        console.log('ü™ü [MODAL] Fun√ß√£o openCreatePTDModal chamada');
        
        if (window.DashboardModals && window.DashboardModals.openCreatePTDModal) {
            window.DashboardModals.openCreatePTDModal();
        } else if (window.Dashboard && window.Dashboard.openCreatePTDModal) {
            window.Dashboard.openCreatePTDModal();
        } else {
            console.error('‚ùå [MODAL] Sistema de modais n√£o dispon√≠vel');
            alert('Sistema de modais n√£o est√° funcionando. Recarregue a p√°gina.');
        }
    };

    window.openCreateAdminModal = function() {
        console.log('ü™ü [MODAL] Fun√ß√£o openCreateAdminModal chamada');
        
        if (window.DashboardModals && window.DashboardModals.openCreateAdminModal) {
            window.DashboardModals.openCreateAdminModal();
        } else if (window.Dashboard && window.Dashboard.openCreateAdminModal) {
            window.Dashboard.openCreateAdminModal();
        } else {
            console.error('‚ùå [MODAL] Sistema de modais n√£o dispon√≠vel');
            alert('Sistema de modais n√£o est√° funcionando. Recarregue a p√°gina.');
        }
    };

    // Fun√ß√£o para fechar modais
    window.closeModal = function(modalId) {
        console.log('‚ùå [MODAL] Fechando modal:', modalId);
        
        if (window.DashboardModals && window.DashboardModals.closeModal) {
            window.DashboardModals.closeModal(modalId);
        } else if (window.Dashboard && window.Dashboard.closeModal) {
            window.Dashboard.closeModal(modalId);
        } else {
            // Fallback manual
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'none';
                modal.classList.add('hidden');
                document.body.classList.remove('modal-open');
            }
        }
    };
    </script>
</div>