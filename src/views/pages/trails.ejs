<!-- Trilhas de Aprendizado Page -->
<link rel="stylesheet" href="css/trail.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<!-- Main Content -->
<main class="main-content">
    <h1 class="page-title">Trilhas de Aprendizado</h1>
    <p class="page-subtitle">Escolha uma trilha e comece sua jornada de conhecimento</p>

    <div class="trails-container">
        <!-- Navigation Arrows -->
        <button class="nav-arrow left" onclick="scrollTrails('left')">
            <i class="fas fa-chevron-left"></i>
        </button>
        <button class="nav-arrow right" onclick="scrollTrails('right')">
            <i class="fas fa-chevron-right"></i>
        </button>

        <!-- Trails Grid -->
        <div class="trails-grid" id="trailsGrid">
            <!-- Loading inicial -->
            <div class="loading" id="loadingState">
                <div class="loading-spinner"></div>
                <p>Carregando trilhas...</p>
            </div>
        </div>
    </div>
</main>

<script>
    // Configura√ß√£o da API
    const API_BASE_URL = 'http://localhost:3000/api';

    // Fun√ß√£o para obter √≠cone baseado no nome da trilha
    function getTrailIcon(trailName) {
        const name = trailName.toLowerCase();
        
        if (name.includes('javascript') || name.includes('js')) {
            return 'JS';
        } else if (name.includes('python') || name.includes('py')) {
            return 'PY';
        } else if (name.includes('react')) {
            return '‚öõÔ∏è';
        } else if (name.includes('node') || name.includes('backend')) {
            return 'üíª';
        } else if (name.includes('html') || name.includes('css')) {
            return 'WEB';
        } else if (name.includes('database') || name.includes('sql')) {
            return 'üóÑÔ∏è';
        } else if (name.includes('mobile') || name.includes('app')) {
            return 'üì±';
        } else if (name.includes('api')) {
            return 'üîó';
        } else {
            return 'üìö';
        }
    }

    // Fun√ß√£o para carregar trilhas da API
    async function loadTrails() {
        const grid = document.getElementById('trailsGrid');
        
        try {
            console.log('Carregando trilhas da API...');
            const response = await fetch(`${API_BASE_URL}/trails`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const trails = await response.json();
            console.log('Trilhas carregadas:', trails);
            
            // Limpar loading
            grid.innerHTML = '';
            
            if (trails && trails.length > 0) {
                trails.forEach(trail => {
                    const trailCard = createTrailCard(trail);
                    grid.appendChild(trailCard);
                });
                
                // Ocultar setas se houver poucas trilhas
                if (trails.length <= 4) {
                    document.querySelector('.nav-arrow.left').style.display = 'none';
                    document.querySelector('.nav-arrow.right').style.display = 'none';
                }
            } else {
                grid.innerHTML = `
                    <div class="error">
                        <div class="error-icon">
                            <i class="fas fa-info-circle"></i>
                        </div>
                        <h3>Nenhuma trilha encontrada</h3>
                        <p>N√£o h√° trilhas dispon√≠veis no momento.</p>
                    </div>
                `;
            }
            
        } catch (error) {
            console.error('Erro ao carregar trilhas:', error);
            grid.innerHTML = `
                <div class="error">
                    <div class="error-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h3>Erro ao carregar trilhas</h3>
                    <p>N√£o foi poss√≠vel conectar com o servidor. Verifique se a API est√° rodando em ${API_BASE_URL}/trails</p>
                    <button class="btn btn-primary" onclick="loadTrails()">
                        Tentar Novamente
                    </button>
                </div>
            `;
        }
    }

    // Fun√ß√£o para criar card de trilha
    function createTrailCard(trail) {
        const card = document.createElement('div');
        card.className = 'trail-card';
        card.setAttribute('data-trail-id', trail.id);
        
        card.innerHTML = `
            <div class="trail-icon">
                ${getTrailIcon(trail.name)}
            </div>
            <h3 class="trail-title">${trail.name}</h3>
            <p class="trail-description">
                ${trail.description || 'Descri√ß√£o n√£o dispon√≠vel'}
            </p>
            <button class="trail-button" onclick="viewTrailModules(${trail.id})">
                VER M√ìDULOS
            </button>
        `;
        
        return card;
    }

    // Fun√ß√£o para navegar pelas trilhas (scroll horizontal)
    function scrollTrails(direction) {
        const grid = document.getElementById('trailsGrid');
        const scrollAmount = 300;
        
        if (direction === 'left') {
            grid.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
        } else {
            grid.scrollBy({ left: scrollAmount, behavior: 'smooth' });
        }
    }

    // Fun√ß√£o para visualizar m√≥dulos da trilha
    function viewTrailModules(trailId) {
        // Aqui voc√™ pode fazer uma requisi√ß√£o para buscar m√≥dulos da trilha
        console.log(`Abrindo m√≥dulos da trilha ${trailId}`);
        // Exemplo: window.location.href = `/trails/${trailId}/modules`;
        // Ou fazer nova requisi√ß√£o √† API para buscar m√≥dulos
        alert(`Funcionalidade em desenvolvimento. Trilha ID: ${trailId}`);
    }

    // Fun√ß√£o para buscar trilha por ID
    async function getTrailById(id) {
        try {
            const response = await fetch(`${API_BASE_URL}/trails/${id}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('Erro ao buscar trilha:', error);
            return null;
        }
    }

    // Fun√ß√£o para buscar trilha por nome
    async function getTrailByName(name) {
        try {
            const response = await fetch(`${API_BASE_URL}/trails/name/${encodeURIComponent(name)}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('Erro ao buscar trilha:', error);
            return null;
        }
    }

    // Fun√ß√£o para filtrar trilhas
    function filterTrails(searchTerm) {
        const cards = document.querySelectorAll('.trail-card');
        
        cards.forEach(card => {
            const title = card.querySelector('.trail-title').textContent.toLowerCase();
            const description = card.querySelector('.trail-description').textContent.toLowerCase();
            
            if (title.includes(searchTerm.toLowerCase()) || 
                description.includes(searchTerm.toLowerCase())) {
                card.style.display = 'flex';
            } else {
                card.style.display = 'none';
            }
        });
    }

    // Inicializa√ß√£o quando a p√°gina carregar
    document.addEventListener('DOMContentLoaded', function() {
        console.log('P√°gina carregada, iniciando carregamento das trilhas...');
        loadTrails();

        // Adicionar funcionalidade de busca se houver campo de busca
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', function(e) {
                filterTrails(e.target.value);
            });
        }
    });

    // Fun√ß√£o para recarregar trilhas (√∫til para bot√£o de refresh)
    function refreshTrails() {
        const grid = document.getElementById('trailsGrid');
        grid.innerHTML = `
            <div class="loading" id="loadingState">
                <div class="loading-spinner"></div>
                <p>Carregando trilhas...</p>
            </div>
        `;
        loadTrails();
    }
</script>